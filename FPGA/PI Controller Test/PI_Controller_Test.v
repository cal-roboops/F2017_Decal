
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module PI_Controller_Test(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// EEPROM //////////
	output		          		I2C_SCLK,
	inout 		          		I2C_SDAT,

	//////////// 2x13 GPIO Header //////////
	inout 		    [12:0]		GPIO_2,
	input 		     [2:0]		GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [33:0]		GPIOH0,
	input 		     [1:0]		GPIOH0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [33:0]		GPIOH1,
	input 		     [1:0]		GPIOH1_IN
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
	
	//UART Wires/Regs
	reg [7:0] data_in_reg;
   wire [7:0] data_in, data_out;
   wire data_in_ready, data_in_valid, data_out_valid, data_out_ready;
	wire rst, FPGA_SERIAL_RX, FPGA_SERIAL_TX;
	
	//PWM Controls
	wire In_PWM, Out_PWM, Read_PWM;
	wire [7:0] desired_pwm_num, control_value, read_value, temp_controlled_value;
	
	//I/O assignments:
	assign GPIOH0[0] = FPGA_SERIAL_TX; //writes to pin0
	assign FPGA_SERIAL_RX = GPIOH0[1]; //reads pin1
	assign data_in_valid = 1'b1;
	
	assign In_PWM = GPIOH0[3];
	assign GPIOH0[5] = Out_PWM;
	assign Read_PWM = Out_PWM;     //GPIOH0[7];
	
	//UART assignments:
	assign data_in = control_value;
	assign control_value = (SW[0]) ? read_value : control_value;
	assign LED = desired_pwm_num;
	


//=======================================================
//  Structural coding
//=======================================================

	 uart # (
        .CLOCK_FREQ(50_000_000),
        .BAUD_RATE(9600)
    ) on_chip_uart (
        .clk(CLOCK_50),
        .reset(rst),
        .data_in(data_in),
        .data_in_valid(data_in_valid),
        .data_in_ready(data_in_ready),
        .data_out(data_out),
        .data_out_valid(data_out_valid),
        .data_out_ready(data_out_ready),
        .serial_in(FPGA_SERIAL_RX),
        .serial_out(FPGA_SERIAL_TX)
    );
	 
	 
	//Count input PWM
	PWM_Counter #(
		.PWM_PERIOD(10_000),
		.DUTY_MAX(255),
		.DUTY_MAX_BITS(8)
	) cnt1(
		.clk(CLOCK_50),
		.pwm(In_PWM),
		.pwm_value(desired_pwm_num)
	);
	
	//Count Read PWM
	PWM_Counter #(
		.PWM_PERIOD(1000),
		.DUTY_MAX(255),
		.DUTY_MAX_BITS(8)
	) cnt2(
		.clk(CLOCK_50),
		.pwm(Read_PWM),
		.pwm_value(read_value)
	);
	 
	 
	//Find Control_value
	PI #(
		.NUM_BITS(8),
		.SAMPLES(8),
		.SAMPLE_PERIOD(10_000),
		.Kp_Inv(2),
		.KI_Inv(2)
	)Controller (
		.clk(CLOCK_50),
		.desired_value(desired_pwm_num),
		.read_value(read_value),
		.output_value(temp_controlled_value)
	);
		

	//Generate PWM based off control values
	PWM_Gen #(
		.PWM_PERIOD(1000),
		.DUTY_MAX(255),
		.DUTY_MAX_BITS(8)
	) gen1(
		.clk(CLOCK_50),
		.DUTY_NUM(temp_controlled_value),
		.PWM(Out_PWM)
	);
	 

endmodule
