
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Arm_Controller(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// SW //////////
	input 		     [3:0]		SW,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		     [1:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N,

	//////////// EPCS //////////
	output		          		EPCS_ASDO,
	input 		          		EPCS_DATA0,
	output		          		EPCS_DCLK,
	output		          		EPCS_NCSO,

	//////////// Accelerometer and EEPROM //////////
	output		          		G_SENSOR_CS_N,
	input 		          		G_SENSOR_INT,
	output		          		I2C_SCLK,
	inout 		          		I2C_SDAT,

	//////////// ADC //////////
	output		          		ADC_CS_N,
	output		          		ADC_SADDR,
	output		          		ADC_SCLK,
	input 		          		ADC_SDAT,

	//////////// 2x13 GPIO Header //////////
	inout 		    [12:0]		GPIO_2,
	input 		     [2:0]		GPIO_2_IN,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [33:0]		GPIOH0,
	input 		     [1:0]		GPIOH0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [33:0]		GPIOH1,
	input 		     [1:0]		GPIOH1_IN
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
	localparam CLOCK_FREQ = 50_000_000;
	localparam RESOLUTION_ENCODER = 10;
	
	// Encoder & SSI Wires/Regs
	wire NCS_Test_Encoder, data_in_Test_Encoder, SSI_CLK;
	wire [RESOLUTION_ENCODER-1:0] data_out_Test_Encoder;
	wire SAMPLE_CLK;
	reg SAMPLE = 1'b0, SAMPLE_prev = 1'b0;
	
	// UART A Wires/Regs
   wire [7:0] data_in_UART_A, data_out_UART_A;
   wire data_in_ready_UART_A, data_in_valid_UART_A;
	wire data_out_ready_UART_A, data_out_valid_UART_A;
	wire FPGA_SERIAL_RX, FPGA_SERIAL_TX;
	
	// General I/O assignments:
	assign GPIOH0[0] = FPGA_SERIAL_TX; //writes to pin0
	assign FPGA_SERIAL_RX = GPIOH0[1]; //reads pin1
	
	assign GPIOH0[3] = NCS_Test_Encoder;
	assign GPIOH0[5] = SSI_CLK ;
	assign data_in_Test_Encoder = GPIOH0[7];
	
	//UART assignments:
	assign data_in_UART_A = data_out_Test_Encoder[9:2];
	assign LED = {data_out_Test_Encoder[9:2]};


//=======================================================
//  Structural coding
//=======================================================

	// Create Encoder SSI CLK
	CLOCK_GEN #(
		.INPUT_CLK_FREQ(CLOCK_FREQ),
		.OUTPUT_CLK_FREQ(100_000) // 100 KHz
	) ENCODER_SSI_CLK (
		.clk_in(CLOCK_50),
		.clk_out(SSI_CLK)
	);
	
	// Create Sampling CLK
	CLOCK_GEN #(
		.INPUT_CLK_FREQ(CLOCK_FREQ),
		.OUTPUT_CLK_FREQ(50) // 50 Hz
	) ENCODER_SAMPLE_CLK (
		.clk_in(CLOCK_50),
		.clk_out(SAMPLE_CLK)
	);
	
	// Generate SAMPLE high on each edge of SAMPLE_CLK
	always @(posedge CLOCK_50) begin
		if (SAMPLE_prev != SAMPLE_CLK) begin
			SAMPLE <= 1'b1;
			SAMPLE_prev <= SAMPLE_CLK;
		end
		else SAMPLE <= 1'b0;
	end

	// Create Encoder Test Instance
	AEAT_6600_T16_Encoder #(
		.RESOLUTION(RESOLUTION_ENCODER)
	)TEST_ENCODER (
		.clk(CLOCK_50),
		.SSI_CLK(SSI_CLK),

	  .data_in(data_in_Test_Encoder),
	  .magHIGH(),
	  .magLOW(),
	  
	  .get_position(SAMPLE),
	  .data_out_ready(data_in_ready_UART_A),
	  .data_out_valid(data_in_valid_UART_A),
	  
	  .NCS(NCS_Test_Encoder),
	  .data_out(data_out_Test_Encoder),
	);
	
	// Create UART Instance
	uart # (
        .CLOCK_FREQ(CLOCK_FREQ),
        .BAUD_RATE(9600)
    ) UART_A (
        .clk(CLOCK_50),
        .reset(),
		  
        .data_in(data_in_UART_A),
        .data_in_valid(data_in_valid_UART_A),
        .data_in_ready(data_in_ready_UART_A),
		  
        .data_out(data_out_UART_A),
        .data_out_valid(data_out_valid_UART_A),
        .data_out_ready(data_out_ready_UART_A),

        .serial_in(FPGA_SERIAL_RX),
        .serial_out(FPGA_SERIAL_TX)
    );



endmodule
