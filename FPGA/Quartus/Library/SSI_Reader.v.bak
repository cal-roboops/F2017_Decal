module SSI_Reader#(
	parameter POLLWAITMS = 100,
	parameter POLL_COUNTER_SIZE = `log2(POLLWAITMS),
	parameter RES = 10,
	parameter RES_COUNTER_SIZE = `log2(RES),
	parameter CYCLESINMS = 50
)(
	input clk,
	input DataIn, //DATA I/O
	input magHIGH,
	input magLOW, 
	output SSI_CLK,  //Serial Clock
	output NCS, //CHIP Select
	output [RES-1:0] DataOut, 
	output Poll_test
);
	localparam READING = 1'b1;
	localparam WAITING =  1'b0;
	localparam FIRST = 2'd0;
	localparam SECOND = 2'd1;
	localparam THIRD = 2'd2;
	localparam FOURTH = 2'd3;

	reg Poll_State = 1'b0;
	reg Read_State = 2'b0;

	reg [POLL_COUNTER_SIZE-1:0] Poll_Counter = 0;
	reg [POLL_COUNTER_SIZE-1:0] Read_Counter = 0;
	reg [POLL_COUNTER_SIZE-1:0] Inner_Loop_Counter = 0;
	reg [RES_COUNTER_SIZE-1:0] Bit_Counter = RES-1;
	reg [RES-1:0] DataOut_Reg, Temp_Reading;
	reg NCS_Reg = 0;
	reg SSI_CLK_Reg = 0;

	assign DataOut = DataOut_Reg;
	assign NCS = NCS_Reg;
	assign SSI_CLK = SSI_CLK_Reg;
	assign Poll_test = Poll_State;


	always@(*) begin
		if(Read_Counter < 2*CYCLESINMS) Read_State = (Read_Counter < CYCLESINMS) ? FIRST : SECOND;
		else Read_State = (Read_Counter < 2*CYCLESINMS + (RES-1)*2*CYCLESINMS) ? THIRD : FOURTH;
	end


	always@(posedge clk) begin
		case (Poll_State)
			READING : begin
				Read_Counter <= Read_Counter + 1;
				SSI_CLK_Reg <= 1'b1;
				case(Read_State)
					SECOND : begin
						//SSI_CLK_Reg <= 1'b0;
						Inner_Loop_Counter <= 0;
						Bit_Counter <= RES-1;
						Poll_State <= READING;
					end
					THIRD : begin
						Inner_Loop_Counter <= (Inner_Loop_Counter < 2*CYCLESINMS) ? 0 : Inner_Loop_Counter + 1;
						if(Inner_Loop_Counter < 1*CYCLESINMS) begin
							//SSI_CLK_Reg <= 1'b1;
						end
						else begin
							Temp_Reading[Bit_Counter] <= DataIn;
							//SSI_CLK_Reg <= 1'b0; 
						end
						Bit_Counter <= (Inner_Loop_Counter == 2*CYCLESINMS) ? Bit_Counter - 1 : Bit_Counter;
						Poll_State <= READING;
					end
					FOURTH : begin
						//SSI_CLK_Reg <= 1'b1;
						Temp_Reading[0] <= DataIn;
						NCS_Reg <= 1'b1;
						Poll_Counter <= 0;
						Poll_State <= WAITING;
					end
					default : begin
						NCS_Reg <= 1'b0;
						Poll_State <= READING;
					end
				endcase
			end
			default : begin
				DataOut_Reg <= Temp_Reading;
				Read_Counter <= 0;
				Poll_Counter <= (Poll_Counter > POLLWAITMS*CYCLESINMS) ? 0 : Poll_Counter + 1;
				Poll_State <= (Poll_Counter == POLLWAITMS*CYCLESINMS-1) ? READING : WAITING;
				SSI_CLK_Reg <= 1'b0;
			end
		endcase
	end
endmodule